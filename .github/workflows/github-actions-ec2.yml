name: CI/CD Pipeline

on:
  push:
    branches:
      - main # Trigger on push to main branch
  pull_request:
    branches:
      - main # Trigger on pull requests to main branch

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./client

    steps:
      # CI Steps - Run for both push and pull requests
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

      # - name: Run tests
      #   run: npm test

      - name: Build application
        run: npm run build

      # CD Steps - Only run on push to main branch
      - name: Set up Docker
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker image tags
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_HUB_USERNAME }}/ticket-booking-client
          tags: |
            type=raw,value=latest
            type=sha,format=short

      - name: Build and push Docker image
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v4
        with:
          context: ./client
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to EC2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # SSH into the EC2 instance and deploy
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << EOF
            # Login to Docker Hub
            echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

            # Pull the latest image
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/ticket-booking-client:latest

            # Stop and remove existing container if it exists
            docker stop ticket-booking-container || true
            docker rm ticket-booking-container || true

            # Run the new container
            docker run -d --name ticket-booking-container -p 3000:3000 \
              -e NODE_ENV=production \
              -e DEPLOY_VERSION=$(date +%Y%m%d-%H%M%S) \
              ${{ secrets.DOCKER_HUB_USERNAME }}/ticket-booking-client:latest

            # Clean up unused images
            docker image prune -f

            # Logout from Docker Hub
            docker logout
          EOF
